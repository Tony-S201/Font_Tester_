{"ast":null,"code":"var _jsxFileName = \"/var/www/html/BORDEL DE MERDE/Font_Tester_/src/App.js\";\n\n/**\n * NPM Import\n */\nimport React, { Component } from 'react';\nimport { Select, Switch, InputNumber, Slider } from 'antd';\nimport { SketchPicker } from 'react-color';\n/**\n * LOCAL Import\n */\n\nimport './App.css';\nimport Arial from './Arial';\nimport { FontList } from './FontList';\n/**\n * CODE Here\n */\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentFontComponent: undefined,\n      currentFontWeight: undefined,\n      themeFontColor: undefined,\n      inputBackgroundColor: undefined,\n      colorPicker: undefined,\n      currentSize: undefined // Add the select option value to the state at currentFont\n\n    };\n\n    this.onChangeFont = value => {\n      console.log(\"selected \".concat(value));\n      let currentFontComponent = value.charAt(0).toUpperCase() + value.slice(1);\n      this.setState({\n        currentFontComponent\n      });\n    };\n\n    this.onChangeFontWeight = value => {\n      let currentFontWeight = value;\n      this.setState({\n        currentFontWeight\n      });\n    };\n\n    this.onChangeTheme = checked => {\n      if (checked === false) {\n        document.body.style.backgroundColor = '#FFFFFF';\n        this.setState({\n          themeFontColor: '#000000',\n          inputBackgroundColor: '#FFFFFF'\n        });\n      } else {\n        document.body.style.backgroundColor = '#2F2E33';\n        this.setState({\n          themeFontColor: '#FFFFFF',\n          inputBackgroundColor: '#2F2E33'\n        });\n      }\n    };\n\n    this.onPickerChange = color => {\n      this.setState({\n        colorPicker: color.hex\n      });\n    };\n\n    this.onSizeChange = value => {\n      this.setState({\n        currentSize: value\n      });\n    };\n\n    this.onBlur = () => {\n      console.log('blur');\n    };\n\n    this.onFocus = () => {\n      console.log('focus');\n    };\n\n    this.onSearch = val => {\n      console.log('search:', val);\n    };\n  }\n\n  render() {\n    const Option = Select.Option;\n    const currentFontComponent = this.state.currentFontComponent;\n    const currentFontWeight = this.state.currentFontWeight;\n    const themeFontColor = this.state.themeFontColor;\n    const inputBackgroundColor = this.state.inputBackgroundColor;\n    const colorPicker = this.state.colorPicker;\n    const currentSize = this.state.currentSize;\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      style: {\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Font Tester\"), React.createElement(\"strong\", {\n      style: {\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Switch to dark mode\"), React.createElement(Switch, {\n      onChange: this.onChangeTheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      style: {\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"A selection of my favorites fonts that you can try !\"), React.createElement(\"strong\", {\n      style: {\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Font : \"), React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: 200\n      },\n      dropdownStyle: {\n        backgroundColor: inputBackgroundColor\n      },\n      placeholder: \"Select a font\",\n      optionFilterProp: \"children\",\n      onChange: this.onChangeFont,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onSearch: this.onSearch,\n      filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, FontList.map(thefont => React.createElement(Option, {\n      key: thefont.font,\n      value: thefont.font,\n      style: {\n        fontFamily: \"\".concat(thefont.font, \", sans-serif\"),\n        fontWeight: \"\".concat(currentFontWeight),\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, thefont.font))), React.createElement(\"strong\", {\n      style: {\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Font-weight : \"), React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: 200\n      },\n      dropdownStyle: {\n        backgroundColor: inputBackgroundColor\n      },\n      placeholder: \"Select a font-weight\",\n      optionFilterProp: \"children\",\n      onChange: this.onChangeFontWeight,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onSearch: this.onSearch,\n      filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"normal\",\n      style: {\n        fontWeight: 'normal',\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Normal\"), React.createElement(Option, {\n      value: \"bold\",\n      style: {\n        fontWeight: 'bold',\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Bold\")), React.createElement(\"strong\", {\n      style: {\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Size (1 to 48) : \"), React.createElement(InputNumber, {\n      min: 1,\n      max: 48,\n      onChange: this.onSizeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Slider, {\n      defaultValue: 14,\n      max: 48,\n      onChange: this.onSizeChange,\n      tooltipVisible: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      style: {\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Color : \"), React.createElement(SketchPicker, {\n      onChangeComplete: this.onPickerChange,\n      color: colorPicker,\n      disableAlpha: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      style: {\n        fontFamily: \"\".concat(currentFontComponent, \", sans-serif\"),\n        color: themeFontColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, currentFontComponent), React.createElement(Arial, {\n      currentFontComponent: currentFontComponent,\n      currentFontWeight: currentFontWeight,\n      themeFontColor: themeFontColor,\n      colorPicker: colorPicker,\n      currentSize: currentSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  }\n\n}\n/**\n* Export\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/var/www/html/BORDEL DE MERDE/Font_Tester_/src/App.js"],"names":["React","Component","Select","Switch","InputNumber","Slider","SketchPicker","Arial","FontList","App","state","currentFontComponent","undefined","currentFontWeight","themeFontColor","inputBackgroundColor","colorPicker","currentSize","onChangeFont","value","console","log","charAt","toUpperCase","slice","setState","onChangeFontWeight","onChangeTheme","checked","document","body","style","backgroundColor","onPickerChange","color","hex","onSizeChange","onBlur","onFocus","onSearch","val","render","Option","width","input","option","props","children","toLowerCase","indexOf","map","thefont","font","fontFamily","fontWeight"],"mappings":"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","sourcesContent":["/**\n * NPM Import\n */\nimport React, { Component } from 'react';\nimport { Select, Switch, InputNumber, Slider } from 'antd';\nimport { SketchPicker } from 'react-color';\n/**\n * LOCAL Import\n */\nimport './App.css';\nimport Arial from './Arial';\nimport { FontList } from './FontList';\n\n/**\n * CODE Here\n */\nclass App extends Component {\n  state = {\n    currentFontComponent: undefined,\n    currentFontWeight : undefined,\n    themeFontColor : undefined,\n    inputBackgroundColor: undefined,\n    colorPicker: undefined,\n    currentSize : undefined,\n  }  \n  \n  // Add the select option value to the state at currentFont\n  onChangeFont = value => {\n    console.log(`selected ${value}`)\n    let currentFontComponent = value.charAt(0).toUpperCase() + value.slice(1);\n    this.setState({ currentFontComponent })\n  }\n  \n  onChangeFontWeight = value => {\n    let currentFontWeight = value;\n    this.setState({ currentFontWeight })\n  }\n\n  \n  onChangeTheme = checked => {\n    if (checked === false) {\n      document.body.style.backgroundColor = '#FFFFFF';\n      this.setState({themeFontColor: '#000000', inputBackgroundColor: '#FFFFFF'});\n    } else {\n      document.body.style.backgroundColor = '#2F2E33';\n      this.setState({themeFontColor: '#FFFFFF', inputBackgroundColor: '#2F2E33'});\n    }\n  }\n\n  onPickerChange = (color) => {\n    this.setState({colorPicker: color.hex})\n  }\n\n  onSizeChange = (value) => {\n    this.setState({currentSize: value})\n  }\n  // onTextChange = () => {\n  //   this.setState({myText: !this.state.myText})\n  // }\n\n  onBlur = () => {\n    console.log('blur')\n  }\n\n  onFocus = () => {\n    console.log('focus')\n  }\n\n  onSearch = (val) => {\n    console.log('search:', val)\n  }\n\n\n  render () {\n    const { Option } = Select\n    const { currentFontComponent } = this.state\n    const { currentFontWeight } = this.state\n    const { themeFontColor } = this.state\n    const { inputBackgroundColor } = this.state\n    const { colorPicker } = this.state\n    const { currentSize } = this.state\n    \n    return (\n      <>\n\n        <h1 style={{color: themeFontColor}}>Font Tester</h1>\n        <strong style={{color: themeFontColor}}>Switch to dark mode</strong>\n        <Switch onChange={this.onChangeTheme} />\n        <h2 style={{color: themeFontColor}}>A selection of my favorites fonts that you can try !</h2>\n        <strong style={{color: themeFontColor}}>Font : </strong>\n        {/* This is the Select from antd, onChange with option choice execute the onChange function */}\n        <Select\n          showSearch\n          style={{ width: 200}}\n          dropdownStyle={{backgroundColor: inputBackgroundColor}}\n          placeholder=\"Select a font\"\n          optionFilterProp=\"children\"\n          onChange={this.onChangeFont}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          onSearch={this.onSearch}\n          filterOption={(input, option) =>\n          option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {FontList.map(thefont => (\n            <Option key={thefont.font} value={thefont.font} style={{fontFamily: `${thefont.font}, sans-serif`, fontWeight: `${currentFontWeight}`, color: themeFontColor}}>{thefont.font}</Option>\n          ))}\n        </Select>\n\n        <strong style={{color: themeFontColor}}>Font-weight : </strong>  \n        <Select\n          showSearch\n          style={{ width: 200 }}\n          dropdownStyle={{backgroundColor: inputBackgroundColor}}\n          placeholder=\"Select a font-weight\"\n          optionFilterProp=\"children\"\n          onChange={this.onChangeFontWeight}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          onSearch={this.onSearch}\n          filterOption={(input, option) =>\n          option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          <Option value=\"normal\" style={{fontWeight: 'normal', color: themeFontColor}}>Normal</Option>\n          <Option value=\"bold\" style={{fontWeight: 'bold', color: themeFontColor}}>Bold</Option>\n        </Select>\n\n        <strong style={{color: themeFontColor}}>Size (1 to 48) : </strong>\n        <InputNumber min={1} max={48} onChange={this.onSizeChange} />\n        <Slider defaultValue={14} max={48} onChange={this.onSizeChange} tooltipVisible />\n        \n        <strong style={{color: themeFontColor}}>Color : </strong>\n        <SketchPicker onChangeComplete={this.onPickerChange} color={colorPicker} disableAlpha />\n\n        <h1 style={{fontFamily: `${currentFontComponent}, sans-serif`, color: themeFontColor}}>{currentFontComponent}</h1>\n\n        <Arial currentFontComponent={currentFontComponent} currentFontWeight={currentFontWeight} themeFontColor={themeFontColor} colorPicker={colorPicker} currentSize={currentSize} />\n\n      </>\n    )\n  }\n}\n\n /**\n* Export\n*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}